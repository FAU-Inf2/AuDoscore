#!/bin/sh

# Compare wrapper-script to be called from 'testcase_run.sh'.
#
# Usage: $0 <testdata.in> <program.out> <testdata.out> <result.out> <diff.out>
#
# <testdata.in>   File containing testdata input.
# <program.out>   File containing the program output.
# <testdata.out>  File containing the correct output.
# <result.out>    File describing the judging verdict.
# <diff.out>      File to write program/correct output differences to (optional).
#
#
# Exits successfully except when an internal error occurs. Submitted
# program output is considered correct when diff.out is empty (and
# specified).
#
# This script calls another program to check the results.
# Calling syntax:
#
#    $CHECK_PROGRAM <testdata.in> <program.out> <testdata.out>
#
# The $CHECK_PROGRAM should return the contents of <diff.out> to
# standard output. It must exit with exitcode zero to indicate
# successful checking.

# Check program. The default program name below is defined by
# replacing 'compare_' by 'check_' in this programs name. So by
# copying or symlinking this default 'compare_wrapper' to
# compare_<your_compare>, the program 'check_<your_compare>' will be
# called; modify as required.
#CHECK_PROGRAM="${0%/*}/check_${0##*compare_}"

# Options to pass to check program:
CHECK_OPTIONS=""

TESTIN="$1"
PROGRAM="$2"
TESTOUT="$3"
RESULT="$4"
DIFFOUT="${5:-/dev/null}"

writeresult()
{
    ( cat <<EOF
result=$1
EOF
    ) > "$RESULT"
}

cat $PROGRAM | grep "^java.lang.annotation.AnnotationFormatError"
if [ $? -ne 0 ]; then
	LC_ALL=en_US.UTF-8 java -cp "execdir/lib/junitpoints.jar:execdir/lib/json-simple-1.1.1.jar" JUnitPointsMerger program.err $DIFFOUT

	# Check result and write result file:
	if [ $? -ne 0 ]; then
		# merging points failed -> internal error for EST
		writeresult "Run error"
	else
		writeresult "Accepted"
	fi
else
	# testfile is broken
	writeresult "Run error"
fi

exit 0
